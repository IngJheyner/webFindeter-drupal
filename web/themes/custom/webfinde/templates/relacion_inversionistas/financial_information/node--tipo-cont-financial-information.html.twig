{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}
{%
  set classes = [
    'node',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
  ]
%}

<style>
  .nav.nav-pills .nav-item{
    width:140px;
    height:80px;
    margin:10px;
    border:1px solid;
    border-radius: 6px;
    border-color: #dbdbdc;
    -webkit-box-shadow: 16px 10px 11px 0px rgba(0,0,0,0.05);
    -moz-box-shadow: 16px 10px 11px 0px rgba(0,0,0,0.05);
    box-shadow: 16px 10px 11px 0px rgba(0,0,0,0.05);

  }
  .nav-item .nav-link {
    width: 100%;
    height: 100%;
  }
  .nav-item .nav-link.active{
    background-color: #112d6a;
  }
  .w-100p {
    width: 100%;
  }
  .breadcrumbs{
    background-color: #f7f7f7;
    color:#000;
  }
  .h-60px{
    height: 60px;
  }
  .background-gr {
    background-color: #f3f4f6;
  }
  .ptb-115px{
    padding: 115px 0px;
  }
  .pb-115px{
    padding-bottom: 115px;
  }
  .m-tb-2rem{
    margin-top: 2rem;
    margin-bottom: 2rem;
  }
  .encabezado{
    border-bottom: 1px solid #296294;
  }
  .encabezado {
    margin-bottom: 30px;
  }
  .encabezado h1{
    display: inline-block;
  }
  .encabezado h1{
    padding-bottom: 12px;
  }
  
  /*.col-md-6 .encabezado h1:after{
    content: "";
    position: absolute;
    width: 100%;
    height: 4px;
    background-color: #296294;
    top: 1.4em;
    left: 0.2em;
  }
  .col-md-12 .encabezado h1:after{
    display: inline-block;
    content: "";
    position: absolute;
    width: 100%;
    height: 4px;
    background-color: #296294;
    left:15px;
    top:55px;
  }*/
</style>

{%
  set classes = [
    'node',
    'productoServicios',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
  ]
%}

<article{{ attributes.addClass(classes) }}>
  <figure class="w-100">
    <img src="{{ file_url(node.field_img_encab_financi_informat.entity.fileuri) }}" class="img-fluid w-100">
  </figure>  
  <div class="encabezado container">
    <h1 class="tituloEncabezado mt-3">{{ label }}</h1>   
  </div>

  {{ drupal_breadcrumb() }}

  <div class="container ">

    {{ content.body.0 }}

  </div>

</article>
